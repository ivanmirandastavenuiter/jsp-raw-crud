package com.ch33tz.filters;

import java.io.IOException;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.ch33tz.logger.JspLogger;

/**
 * Servlet Filter implementation class RegisterFilter
 */
@WebFilter(filterName = "RegisterFilter", urlPatterns = {"/register.jsp"})
public class RegisterFilter implements Filter {
	
	private final static Logger logger = Logger.getLogger(JspLogger.class.getName()); 
	private FilterConfig registerFilterConfig;

    /**
     * Default constructor. 
     */
    public RegisterFilter() {
    	logger.info("Creating RegisterFilter");
    }

	/**
	 * @see Filter#destroy()
	 */
	public void destroy() {
		logger.info("Destroying RegisterFilter");
		this.registerFilterConfig = null;
	}

	/**
	 * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)
	 */
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {

		logger.info("Starting validation on register filter.");
		
		HttpServletRequest httpServletRequest = (HttpServletRequest)request;
		HttpServletResponse httpServletResponse = (HttpServletResponse)response;
		
		if (httpServletRequest.getMethod().equals("GET")) {
			logger.info("GET request detected on register page. Bypassing filters.");
			chain.doFilter(httpServletRequest, httpServletResponse);
		}
		
		if (httpServletRequest.getMethod().equals("POST")) {
			
			logger.info("POST request detected on index page. Applying filters against input data.");
			
			String name = httpServletRequest.getParameter("name");
			String surname = httpServletRequest.getParameter("surname");
			String username = httpServletRequest.getParameter("username");
			String phone = httpServletRequest.getParameter("phone");
			String email = httpServletRequest.getParameter("email");
			String password = httpServletRequest.getParameter("pass");
			String confirm = httpServletRequest.getParameter("confirm");
			String contextPath = "/register.jsp";
			
			name = name != null ? name.trim() : null;
			surname = surname != null ? surname.trim() : null;
			username = username != null ? username.trim() : null;
			phone = phone != null ? phone.trim() : null;
			email = email != null ? email.trim() : null;
			password = password != null ? password.trim() : null;
			confirm = confirm != null ? confirm.trim() : null;
			
			boolean validation = true;
			Cookie nameCookieError = null;
			Cookie surnameCookieError = null;
			Cookie usernameCookieError = null;
			Cookie phoneCookieError = null;
			Cookie emailCookieError = null;
			Cookie passwordCookieError = null;
			Cookie confirmCookieError = null;
			
			if (name == null || name.isEmpty()) {
				logger.warning("Bad input for name. Populating cookie");
				nameCookieError = new Cookie("name", "name");
				nameCookieError.setMaxAge(1);
				httpServletResponse.addCookie(nameCookieError);
				validation = false;
			}
			
			if (surname == null || surname.isEmpty()) {
				logger.warning("Bad input for surname. Populating cookie");
				surnameCookieError = new Cookie("surname", "surname");
				surnameCookieError.setMaxAge(1);
				httpServletResponse.addCookie(surnameCookieError);
				validation = false;
			}
			
			if (username == null || username.isEmpty()) {
				logger.warning("Bad input for username. Populating cookie");
				usernameCookieError = new Cookie("username", "username");
				usernameCookieError.setMaxAge(1);
				httpServletResponse.addCookie(usernameCookieError);
				validation = false;
			}
			
			String phoneRegex = "(^(\\+\\s?([0]{2})\\s?([0-9]{2})\\s?)?([6-7]{1}[0-9]{2}){1}(\\s([0-9]{3}\\s?[0-9]{3}|[0-9]{2}\\s?[0-9]{2}\\s?[0-9]{2})|([0-9]){6})$)";
			Pattern pattern = Pattern.compile(phoneRegex);
			Matcher matcher = pattern.matcher(phone);
			
			if (phone == null || phone.isEmpty()) {
				logger.warning("Bad input for phone. Populating cookie");
				phoneCookieError = new Cookie("phone", "empty");
				phoneCookieError.setMaxAge(1);
				httpServletResponse.addCookie(phoneCookieError);
				validation = false;
			} else {
				if (!matcher.matches())
			}
			
			
		}
		
	}

	/**
	 * @see Filter#init(FilterConfig)
	 */
	public void init(FilterConfig fConfig) throws ServletException {
		logger.info("RegisterFilter initialization");
		this.registerFilterConfig = fConfig;
	}

}
